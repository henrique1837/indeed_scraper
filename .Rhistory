library(shinydashboard)
install.packages("RODBC")
library(plyr)
library(stringr)
library(ggplot2)
library(plotly)
library(leaflet)
setwd("~/Documentos/scripts/indeed_scraper/")
#### Read data ####
files <- Sys.glob("./results/*")
df_t <- read.csv(file = files[1],
stringsAsFactors = FALSE)
file_date <- as.Date(str_extract(string = files[1],
pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}"))
df_t <- df_t[which(!(str_detect(string = df_t$date,
pattern = "30+"))),]
file_date <- as.Date(str_extract(string = files[1],
pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}"))
df_t$date <- file_date - as.numeric(str_extract(string = df_t$date,
pattern = "[[:digit:]]+"))
for(i in 2:length(files)){
df <- read.csv(file = files[i],
stringsAsFactors = FALSE)
df <- df[which(!(str_detect(string = df$date,
pattern = "30+"))),]
file_date <- as.Date(str_extract(string = files[i],
pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}"))
df$date <- file_date - as.numeric(str_extract(string = df$date,
pattern = "[[:digit:]]+"))
df$date[which(is.na(df$date))] <- file_date
df_t <- rbind(df_t,df[which(!(df$link %in% df_t$link)),])
message("Files ",i," - ",length(files))
}
df_t$city <- gsub(pattern = "[[:punct:]].*",
replacement = "",
x = df_t$location)
df_t$state <- str_extract(string = df_t$location,
pattern = "[A-Z]{2}")
head(df_t$state)
df_t$city <- gsub(pattern = "[[:punct:]].*",
replacement = "",
x = df_t$location)
df_t$state <- str_extract(string = df_t$location,
pattern = "[A-Z]{2}")
df_t$count <- 1
df_agreggated <- ddply(.data = df_t,
.variables = .(date),
.fun = summarize,
totalJobs=sum(count))
df_companies_date <- ddply(.data = df_t,
.variables = .(date,company),
.fun = summarize,
totalJobs=sum(count))
df_companies <- ddply(.data = df_t,
.variables = .(company),
.fun = summarize,
totalJobs=sum(count))
df_places <- ddply(.data = df_t,
.variables = .(city),
.fun = summarize,
totalJobs=sum(count))
# Download lat and long of USA cities (source https://simplemaps.com/data/us-cities)
if(!file.exists("./results/USA_lat_long.csv")){
download.file(url = "https://simplemaps.com/static/data/us-cities/uscitiesv1.4.csv",
destfile = "./results/USA_lat_long.csv" )
}
df_lat_long_cities <- read.csv(file = "./results/USA_lat_long.csv",
stringsAsFactors = FALSE)
df_lat_long_cities$state_id[1]
df_places <- ddply(.data = df_t,
.variables = .(city,state),
.fun = summarize,
totalJobs=sum(count))
indice <- which((toupper(df_lat_long_cities$city) == toupper(df_places$city[i])) &&
(toupper(df_lat_long_cities$state_id) == toupper(df_places$state[i])))
indice
i = 1
indice <- which((toupper(df_lat_long_cities$city) == toupper(df_places$city[i])) &&
(toupper(df_lat_long_cities$state_id) == toupper(df_places$state[i])))
indice
i
toupper(df_places$city[i])
toupper(df_places$state[i])
which(toupper(df_lat_long_cities$state_id)=="GA")
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
indice
df_lat_long_cities$city[indice]
df_lat_long_cities$state_id[indice]
df_lat_long_cities$state_id[indice] == df_places$state[i]
indice <- which(toupper(df_lat_long_cities$state_id[indice]) == toupper(df_places$state[i]))
indice
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
toupper(df_places$state[i])
toupper(df_places$city[i])
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]) &&
toupper(df_lat_long_cities$state_id) == toupper(df_places$state[i]))
indice
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
indice
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
i = 2
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
indice
toupper(df_places$city[i])
i = 3
toupper(df_places$city[i])
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
indice
if(length(indice)>1){
for(ind in indice){
if(toupper(df_lat_long_cities$state_id[ind]) == toupper(df_places$state[i])){
indice <- ind
}
}
}
indice
lats <- numeric()
longs <- numeric()
cities <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
if(length(indice)!=0){
if(length(indice)>1){
for(ind in indice){
if(toupper(df_lat_long_cities$state_id[ind]) == toupper(df_places$state[i])){
indice <- ind
}
}
}
totalJobs[i] <- df_places$totalJobs[i]
cities[i] <- df_places$city[i]
lats[i] <- df_lat_long_cities$lat[indice[1]]
longs[i] <- df_lat_long_cities$lng[indice[1]]
}
}
df_map <- data.frame(city=cities,
lat=lats,
lng=longs,
totalJobs=totalJobs)
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 5000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city))
lats <- numeric()
longs <- numeric()
cities <- character()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
if(length(indice)!=0){
if(length(indice)>1){
for(ind in indice){
if(toupper(df_lat_long_cities$state_id[ind]) == toupper(df_places$state[i])){
indice <- ind
}
}
}
totalJobs[i] <- df_places$totalJobs[i]
cities[i] <- df_places$city[i]
states[i] <- df_places$state[i]
lats[i] <- df_lat_long_cities$lat[indice]
longs[i] <- df_lat_long_cities$lng[indice]
}
}
#### Treat Indeed Data ####
library(rvest)
# Get long and lat data of states
html <- read_html("https://developers.google.com/public-data/docs/canonical/states_csv")
df_states <- html %>% html_table()
View(df_states)
View(df_states)
df_states <- html %>% html_table()[[1]]
df_states <- html %>%
html_node(css = "table") %>%
html_table()
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_states$state) == toupper(df_places$state[i]))
if(length(indice)!=0){
totalJobs[i] <- df_places$totalJobs[i]
states[i] <- df_places$state[i]
lats[i] <- df_lat_long_cities$lat[indice]
longs[i] <- df_lat_long_cities$lng[indice]
}
}
df_map <- data.frame(state=states,
lat=lats,
lng=longs,
totalJobs=totalJobs)
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 5000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city))
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
i = 1
indice <- which(toupper(df_states$state) == toupper(df_places$state[i]))
indice
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_states$state) == toupper(df_places$state[i]))
if(length(indice)!=0){
totalJobs[i] <- df_places$totalJobs[i]
states[i] <- df_places$state[i]
lats[i] <- df_states$lat[indice]
longs[i] <- df_states$lng[indice]
}
}
df_map <- data.frame(state=states,
lat=lats,
lng=longs,
totalJobs=totalJobs)
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_states$state) == toupper(df_places$state[i]))
if(length(indice)!=0){
totalJobs[i] <- df_places$totalJobs[i]
states[i] <- df_places$state[i]
lats[i] <- df_states$lat[indice]
longs[i] <- df_states$lng[indice]
}
}
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_states$state) == toupper(df_places$state[i]))
if(length(indice)!=0){
totalJobs[i] <- df_places$totalJobs[i]
states[i] <- df_places$state[i]
lats[i] <- df_states$latitude[indice]
longs[i] <- df_states$longitude[indice]
}
}
df_map <- data.frame(state=states,
lat=lats,
lng=longs,
totalJobs=totalJobs)
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 5000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 10,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 1000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 100,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
View(df_map)
df_places <- ddply(.data = df_t,
.variables = .(state),
.fun = summarize,
totalJobs=sum(count))
# Get long and lat data of states
html <- read_html("https://developers.google.com/public-data/docs/canonical/states_csv")
df_states <- html %>%
html_node(css = "table") %>%
html_table()
## Preparing dataframe for leaflet map ##
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_states$state) == toupper(df_places$state[i]))
if(length(indice)!=0){
totalJobs[i] <- df_places$totalJobs[i]
states[i] <- df_places$state[i]
lats[i] <- df_states$latitude[indice]
longs[i] <- df_states$longitude[indice]
}
}
df_map <- data.frame(state=states,
lat=lats,
lng=longs,
totalJobs=totalJobs)
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 100,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 10000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 1000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$state))
df_lat_long_cities <- read.csv(file = "./results/USA_lat_long.csv",
stringsAsFactors = FALSE)
## Preparing dataframe for leaflet map ##
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
if(length(indice)!=0){
if(length(indice)>1){
for(ind in indice){
if(toupper(df_lat_long_cities$state_id[ind]) == toupper(df_places$state[i])){
indice <- ind
}
}
}
totalJobs[i] <- df_places$totalJobs[i]
cities[i] <- df_places$city[i]
states[i] <- df_places$state[i]
lats[i] <- df_lat_long_cities$lat[indice]
longs[i] <- df_lat_long_cities$lng[indice]
}
}
df_map <- data.frame(city=cities,
lat=lats,
lng=longs,
totalJobs=totalJobs)
length(citties)
length(cities)
length(totalJobs)
df_places <- ddply(.data = df_t,
.variables = .(city,state),
.fun = summarize,
totalJobs=sum(count))
lats <- numeric()
longs <- numeric()
states <- character()
totalJobs <- numeric()
for(i in 1:nrow(df_places)){
indice <- which(toupper(df_lat_long_cities$city) == toupper(df_places$city[i]))
if(length(indice)!=0){
if(length(indice)>1){
for(ind in indice){
if(toupper(df_lat_long_cities$state_id[ind]) == toupper(df_places$state[i])){
indice <- ind
}
}
}
totalJobs[i] <- df_places$totalJobs[i]
cities[i] <- df_places$city[i]
states[i] <- df_places$state[i]
lats[i] <- df_lat_long_cities$lat[indice]
longs[i] <- df_lat_long_cities$lng[indice]
}
}
df_map <- data.frame(city=cities,
lat=lats,
lng=longs,
totalJobs=totalJobs)
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 5000,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 50,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city))
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 50,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city)) %>% addMarkers(clusterOptions = markerClusterOptions())
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs * 50,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city)) %>% addMarkers(clusterOptions = markerClusterOptions())
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs ,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city)) %>% addMarkers(clusterOptions = markerClusterOptions())
## Vizualize data ##
df_map %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 2,
lng = df_map$lng,
lat=df_map$lat,
radius = df_map$totalJobs ,
label = paste0("Total of ",
df_map$totalJobs,
" Ethereum Jobs in ",
df_map$city),clusterOptions = markerClusterOptions())
